% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mgz.R
\name{mgz}
\alias{mgz}
\alias{read_mgz}
\alias{write_mgz}
\alias{write_mgz.ieegio_volume}
\alias{write_mgz.ieegio_mgh}
\alias{write_mgz.nifti}
\alias{write_mgz.niftiImage}
\alias{write_mgz.ants.core.ants_image.ANTsImage}
\alias{write_mgz.array}
\title{Read and write to 'MGH' format (volume)}
\usage{
read_mgz(file, header_only = FALSE)

write_mgz(x, con, ...)

\method{write_mgz}{ieegio_volume}(x, con, ...)

\method{write_mgz}{ieegio_mgh}(x, con, ...)

\method{write_mgz}{nifti}(x, con, ...)

\method{write_mgz}{niftiImage}(x, con, ...)

\method{write_mgz}{ants.core.ants_image.ANTsImage}(x, con, ...)

\method{write_mgz}{array}(x, con, vox2ras = NULL, ...)
}
\arguments{
\item{file}{file path to read volume data}

\item{header_only}{whether to read header data only;
default is \code{FALSE}}

\item{x}{volume data (such as 'NIfTI' image, array, or 'MGH')
to be saved}

\item{con}{file path to store image}

\item{...}{passed to other methods, mostly
\code{\link[freesurferformats]{write.fs.mgh}}}

\item{vox2ras}{a \code{4x4} transform matrix from voxel indexing (column,
row, slice) to scanner (often 'T1-weighted' image) 'RAS'
(right-anterior-superior) coordinate}
}
\value{
\code{read_mgz} returns an \code{ieegio_volume} object
}
\description{
Read and write to 'MGH' format (volume)
}
\examples{

if(ieegio_sample_data(
  file = "brain.demosubject.mgz",
  test = TRUE)) {

  file <- ieegio_sample_data("brain.demosubject.mgz")

  # read
  vol <- read_mgz(file)

  # voxel to scanner RAS
  vol$transforms$vox2ras

  # to freesurfer surface
  vol$transforms$vox2ras_tkr

  # to FSL
  vol$transforms$vox2fsl

  image(vol$data[,,128,], asp = 1, axes = FALSE)


  # write
  f <- tempfile(fileext = ".mgz")
  write_mgz(vol, f)

  # file size in MB
  file.size(f) / 1024^2

  # clean up
  unlink(f)

  # try to save NIfTI data to MGH/MGZ
  file2 <- ieegio_sample_data("brain.demosubject.nii.gz")
  nii <- read_nii(file2)

  f <- tempfile(fileext = ".mgz")
  write_mgz(nii, f)

  mgz <- read_mgz(f)

  # check if transform and data are identical
  mgz$transforms$vox2ras - nii$transforms$vox2ras

  range(as.vector(mgz$data) - as.vector(nii$data))

  # clean up
  unlink(f)

}


}
\seealso{
\code{\link{nii}}
}
